def findEmptySpace(board):
    for row in range(3):
        for i in range(3):
            if(board[row][i]["x"] == 0 and board[row][i]["o"] == 0):
                return [row, i]

def move(board):
    # # # CORNERS # # #
    # TL cases
    if((board[0][1]["o"] == 1 and board[0][2]["o"] == 1) or (board[1][1]["o"] == 1 and board[2][2]["o"] == 1) or (board[2][0]["o"] == 1 and board[1][0]["o"] == 1)):
        if(board[0][0]["x"] == 0 and board[0][0]["o"] == 0): return [0, 0]
        else: print("TL corner win")
    # TR cases
    elif((board[0][1]["o"] == 1 and board[0][0]["o"] == 1) or (board[2][0]["o"] == 1 and board[1][1]["o"] == 1) or (board[2][2]["o"] == 1 and board[1][2]["o"] == 1)):
        if(board[0][2]["x"] == 0 and board[0][2]["o"] == 0): return [0, 2]
        else: print("tr corner win"); return [1, 0]
    # BR cases
    elif((board[1][2]["o"] == 1 and board[0][2]["o"] == 1) or (board[0][0]["o"] == 1 and board[1][1]["o"] == 1) or (board[2][0]["o"] == 1 and board[2][1]["o"] == 1)):
        if(board[2][2]["x"] == 0 and board[2][2]["o"] == 0): return [2, 2]
        else: print("br corner win")
    # BL cases
    elif((board[2][1]["o"] == 1 and board[2][2]["o"] == 1) or (board[1][0]["o"] == 1 and board[0][0]["o"] == 1) or (board[0][2]["o"] == 1 and board[1][1]["o"] == 1)):
        if(board[2][0]["x"] == 0 and board[2][0]["o"] == 0): return [2, 0]
        else: print("bl corner win")
    # # # CENTRE EDGES # # #
    # TM edge
    elif((board[0][0]["o"] == 1 and board[0][2]["o"] == 1) or (board[1][1]["o"] == 1 and board[2][1]["o"] == 1)):
        if(board[0][1]["x"] == 0 and board[0][1]["o"] == 0): return [0, 1]
        else: print("tm edge win")
    # LM edge
    elif((board[0][0]["o"] == 1 and board[2][0]["o"] == 1) or (board[1][1]["o"] == 1 and board[1][2]["o"] == 1)):
        if(board[1][0]["x"] == 0 and board[1][0]["o"] == 0): return [1, 0]
        else: print("lm edge win")
    # BM edge
    elif((board[2][0]["o"] == 1 and board[2][2]["o"] == 1) or (board[1][1]["o"] == 1 and board[2][1]["o"] == 1)):
        if(board[2][1]["x"] == 0 and board[2][1]["o"] == 0): return [2, 1]
        else: print("bm edge win")
    # RM edge
    elif((board[0][2]["o"] == 1 and board[2][2]["o"] == 1) or (board[1][0]["o"] == 1 and board[1][1]["o"] == 1)):
        if(board[1][2]["x"] == 0 and board[1][2]["o"] == 0): return [1, 2]
        else: print("rm edge win")
    # # # DEAD CENTRE # # #
    elif((board[1][1]["o"] == 1 and board[2][1]["o"] == 1) or (board[1][0]["o"] == 1 and board[1][2]["o"] == 1) or (board[0][0]["o"] == 1 and board[2][2]["o"] == 1) or (board[0][2]["o"] == 1 and board[2][0]["o"] == 1)):
        if(board[1][1]["x"] == 0 and board[1][1]["o"] == 0): return [1, 1]
        else: print("deead centre win")
    else:
        ####################### AI BLOCKING ######################
        # # # CORNERS # # #
        # TL cases
        if((board[0][1]["x"] == 1 and board[0][2]["x"] == 1) or (board[1][1]["x"] == 1 and board[2][2]["x"] == 1) or (board[2][0]["x"] == 1 and board[1][0]["x"] == 1)):
            if(board[0][0]["x"] == 0 and board[0][0]["o"] == 0): return [0, 0]
            else: print("tl corner")
        # TR cases
        elif((board[0][1]["x"] == 1 and board[0][0]["x"] == 1) or (board[2][0]["x"] == 1 and board[1][1]["x"] == 1) or (board[2][2]["x"] == 1 and board[1][2]["x"] == 1)):
            if(board[0][2]["x"] == 0 and board[0][2]["o"] == 0): return [0, 2]
            else: print("tr corner")
        # BR cases
        elif((board[1][2]["x"] == 1 and board[0][2]["x"] == 1) or (board[0][0]["x"] == 1 and board[1][1]["x"] == 1) or (board[2][0]["x"] == 1 and board[2][1]["x"] == 1)):
            if(board[2][2]["x"] == 0 and board[2][2]["o"] == 0): return [2, 2]
            else: print("br edge")
        # BL cases
        elif((board[2][1]["x"] == 1 and board[2][2]["x"] == 1) or (board[1][0]["x"] == 1 and board[0][0]["x"] == 1) or (board[0][2]["x"] == 1 and board[1][1]["x"] == 1)):
            if(board[2][0]["x"] == 0 and board[2][0]["o"] == 0): return [2, 0]
            else: print("bl edge")
        # # # CENTRE EDGES # # #
        # TM edge
        elif((board[0][0]["x"] == 1 and board[0][2]["x"] == 1) or (board[1][1]["x"] == 1 and board[2][1]["x"] == 1)):
            if(board[0][1]["x"] == 0 and board[0][1]["o"] == 0): return [0, 1]
            else: print("tm edge")
        # LM edge
        elif((board[0][0]["x"] == 1 and board[2][0]["x"] == 1) or (board[1][1]["x"] == 1 and board[1][2]["x"] == 1)):
            if(board[1][0]["x"] == 0 and board[1][0]["o"] == 0): return [1, 0]
            else: print("lm edge")
        # BM edge
        elif((board[2][0]["x"] == 1 and board[2][2]["x"] == 1) or (board[1][1]["x"] == 1 and board[2][1]["x"] == 1)):
            if(board[2][1]["x"] == 0 and board[2][1]["o"] == 0): return [2, 1]
            else: print("bm edge")
        # RM edge
        elif((board[0][2]["x"] == 1 and board[2][2]["x"] == 1) or (board[1][0]["x"] == 1 and board[1][1]["x"] == 1)):
            if(board[1][2]["x"] == 0 and board[1][2]["o"] == 0): return [1, 2]
            else: print("rm edge")
        # # # DEAD CENTRE # # #
        elif((board[1][1]["x"] == 1 and board[2][1]["x"] == 1) or (board[1][0]["x"] == 1 and board[1][2]["x"] == 1) or (board[0][0]["x"] == 1 and board[2][2]["x"] == 1) or (board[0][2]["x"] == 1 and board[2][0]["x"] == 1)):
            if(board[1][1]["x"] == 0 and board[1][1]["o"] == 0): return [1, 1]
            else: print("Dead centre")
        else:
            # No wins, no blocks, random spot time
            return findEmptySpace(board)